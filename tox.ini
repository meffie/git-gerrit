#
# Setup:
#
#    $ python3 -m venv .venv
#    $ source .venv/bin/activate
#    (.venv) $ pip install -U pip setuptools
#    (.venv) $ pip install tox
#
# Usage:
#
#    $ tox list  # to list environments
#    $ tox [-e <enviroment>] [-- <pytest-options>]
#
[tox]
minversion = 4.12.0
env_list = py{38,39,310,311,312}

[testenv]
description = Run the tests
package = wheel
wheel_build_env = .pkg
deps =
    pytest==8.0.2
commands =
    pytest -v tests {posargs}

#
# Usage:  tox -e dev
#
# To activate the development environment:
#
#    deactivate
#    source .tox/dev/bin/activate
#
# Run the tests with pytest:
#
#    pytest --co tests            # list tests
#    pytest -v [-k <pattern>] tests # run tests
#
[testenv:dev]
description = Development environment
basepython = python3.12
usedevelop = True
deps =
    tox
    pytest==8.0.2
commands =

#
# Usage:  tox -e format
#
[testenv:format]
description = Format code with black
basepython = python3.12
deps =
    black==24.2.0
commands =
    python -m black --skip-string-normalization git_gerrit tests

#
# Usage:  tox -e lint
#
[testenv:lint]
description = Run static checks
basepython = python3.12
deps =
    flake8==7.0.0
    pyflakes==3.2.0
commands =
    pyflakes git_gerrit tests
    flake8 --max-line-length=90 --ignore=E203,E701 git_gerrit tests

#
# Usage:  tox -e build
#
[testenv:build]
basepython = python3.12
deps =
    build==1.0.3
commands =
    python -m build

#
# Usage:  tox -e release
#
# Note: Set TWINE env vars or ~/.pypirc before running.
#
[testenv:release]
basepython = python3.12
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL
deps =
    build==1.0.3
    twine==4.0.2
commands =
    python -m build
    twine check dist/*
    twine upload --repository git-gerrit --skip-existing dist/*
